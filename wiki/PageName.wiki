#summary How to use django_dms

= Using the framework =
`django-dms` can be used as a framework, that is, to help developers build apps with document management features. It does this by defining an abstract data model (`DocumentBase`), which can be inherited and extended.

== Basic use ==
In your `models.py`, simply create a model from either `DocumentBase` or `BasicDocumentBase`.
{{{
from django_dms import DocumentBase

class Report(DocumentBase):
    name = models.CharField(max_length=150)
}}}

`BasicDocumentBase` already defines a few useful fields, such as `title`, `summary`, `author` and `date_created`. This can automatically be populated from the document's metadata, if the metadata system is connected (see below).

== Automatically populating from a document's metadata ==

If you connect the `extract_metadata` function, data can be automatically
extracted from the uploaded file on save. 
{{{
class Report(DocumentBase):
    name = models.CharField(max_length=150)

from django.db.models.signals import pre_save
from django_dms.metadata import extract_metadata
pre_save.connect(extract_metadata, Report)
}}}

You can choose which fields get imported using the attribute `AUTO_METADATA`. This can be a dict, whose key is a field in your model, and whose value provides the name of the attribute to extract from documents.
{{{
class Report(DocumentBase):
    name = models.CharField(max_length=150)
    
    AUTO_METADATA = dict(name='title')

from django.db.models.signals import pre_save
from django_dms.metadata import extract_metadata
pre_save.connect(extract_metadata, Report)
}}}

You can also process the automatically scanned fields by adding a method called `process_metadata_FIELDNAME`, for example:
{{{
class Report(DocumentBase):
    name = models.CharField(max_length=150)
    
    AUTO_METADATA = {'recipient': 'destination', 'author': 'creator'}
    def process_metadata_name(self, value):
        return value.title()

from django.db.models.signals import pre_save
from django_dms.metadata import extract_metadata
pre_save.connect(extract_metadata, Report)
}}}